#########data prep################

import pandas as pd

urls = ['https://raw.githubusercontent.com/jerrytigerxu/NBA-Salary-Prediction/master/data/Seasons_Stats.csv', 'https://raw.githubusercontent.com/jerrytigerxu/NBA-Salary-Prediction/master/data/1990_to_2018.csv', 'https://raw.githubusercontent.com/jerrytigerxu/NBA-Salary-Prediction/master/data/NBA%20Season%20Data.csv']

data = {} # I'm creating a dictionary where all of my data can be stored in one place

for f in urls:
  d = pd.read_csv(f)
  data[f.replace('.csv', '')[81:].replace('%20', '_')] = d
  
#############data clean###############
#remove the first column of data frame#
data['Seasons_Stats'] = data['Seasons_Stats'].drop(data['Seasons_Stats'].columns[0], axis=1)
  
data['Seasons_Stats'].head()
  
data['Seasons_Stats']['Year'].isnull().sum()
data['Seasons_Stats'][data['Seasons_Stats']['Year'].isnull() == True]

data['Seasons_Stats'] = data['Seasons_Stats'].dropna(subset=['Year'])

data['Seasons_Stats']['Year'].isnull().sum()
########No more NaN values in year column####

data[Seasons_Stats']['Year'] = data['Seasons_Stats']['Year'].astype('int64')
##Now can convert years into integers##

data['Seasons_Stats'].head()

data['Seasons_Stats'] = data['Seasons_Stats'][data['Seasons_Stats']['Year'] > 1980]
data['Seasons_Stats'].head()

data['Seasons_Stats'].columns



######## Need to convert all of the money columns into floats############

data['Salary'] = data['Salary'].replace('[\$,]', '', regex=True).astype(float)

data['Total NBA Payroll'] = data['Total NBA Payroll'].replace('[\$,]', '', regex=True).astype(float)

# Clear out the entire 'Team Payroll' column
for rowNum in range(len(data.index.values)):
  data = data.set_value(rowNum, 'Team Payroll', 0)
  
for rowNum in range(len(data.index.values)):
  team = data.iloc[rowNum]['Team']
  previousEntry = data.iloc[rowNum-1]['Team'] # Keeping track of what the previous team name was
 
  if team != previousEntry: # Once it starts on a new team, add up every salary within it
    teamPayroll = data.iloc[rowNum]['Salary'] # Starting value 
    currentRow = rowNum # Example: we set current row to be row 1
    
    while True:
      nextEntry = data.iloc[currentRow+1]['Team'] # We check all of the following rows...
      
      if team != nextEntry: # Until the last instance of the particular team name because it changes to a different one
        data = data.set_value(rowNum, 'Team Payroll', teamPayroll)
        break
      teamPayroll += data.iloc[currentRow+1]['Salary']
      currentRow += 1 
      
  elif team == previousEntry: # If the team is the same as the previous, just copy the total payroll
      data = data.set_value(rowNum, 'Team Payroll', data.iloc[rowNum-1]['Team Payroll'])

      
  data.to_csv('./updated_nba_salaries.csv')
  
  
  ######creating a player leverage column##############
  
  data['salaries']['Player Leverage'] = data['salaries']['Salary'] / data['salaries']['Team Payroll']
  
  data['salaries'].head()
  
  
  
  
  
  
  
